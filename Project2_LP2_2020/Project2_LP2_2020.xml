<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Project2_LP2_2020</name>
    </assembly>
    <members>
        <member name="T:Project2_LP2_2020.Board">
            <summary>
            
            </summary>
        </member>
        <member name="P:Project2_LP2_2020.Board.TotColumns">
            <summary>
            Gets x axis of the board.
            </summary>
        </member>
        <member name="P:Project2_LP2_2020.Board.TotRows">
            <summary>
            Gets Y axis of the board.
            </summary>
        </member>
        <member name="P:Project2_LP2_2020.Board.BoardArray">
            <summary>
            Gets array bi-dimensional de chars.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.Board.totColumns">
            <summary>
            X axis of the board.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.Board.totRows">
            <summary>
            Y axis of the board.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.Board.boardArray">
            <summary>
            Array bi-dimensional de chars.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.Board.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.Board.CreateEmptyBoard">
            <summary>
            Fills the board array with empty values. 
            (Column by column, top-row to bottom-row).
            </summary>
        </member>
        <member name="T:Project2_LP2_2020.BoardComponent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Project2_LP2_2020.BoardComponent.Pixels">
            <summary>
            Gets
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.BoardComponent.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.BoardComponent.Update">
            <summary>
            
            </summary>
        </member>
        <member name="T:Project2_LP2_2020.BoardFiller">
            <summary>
            
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.BoardFiller.#ctor(Project2_LP2_2020.Board)">
            <summary>
            
            </summary>
            <param name="board"></param>
        </member>
        <member name="M:Project2_LP2_2020.BoardFiller.CanAdd(System.Int32)">
            <summary>
            Checks if the top row of the chosen column is free.
            </summary>
            <param name="givenColumn">Int identifying the column chosen by 
            the player.</param>
            <returns>Bool stating if the top row of the chosen column 
            is free.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardFiller.Add(System.Int32,Project2_LP2_2020.Color)">
            <summary>
            Places piece in the lowest row of the chosen column and returns
            the row of the placed piece.
            </summary>
            <param name="givenColumn"></param>
            <param name="color"></param>
            <returns>int.</returns>
        </member>
        <member name="T:Project2_LP2_2020.BoardManager">
            <summary>
            Facade class for BoardFiller and BoardSearcher.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.BoardManager.#ctor">
            <summary>
            Constructor creates an instance of the 'Board' class and shares 
            its reference with the classes 'BoardFiller' and 'BoardSearcher' 
            so that they are all working with the same board.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.BoardManager.TryAddingPiece(System.Int32)">
            <summary>
            If the chosen column is valid, place piece in its lowest free space.
            Else, send an error message.
            </summary>
            <param name="givenColumn">Column number given by the player.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardManager.AddPiece(System.Int32,Project2_LP2_2020.Color)">
            <summary>
             Places piece in the lowest row of the chosen column and returns
            the row of the placed piece.
            </summary>
            <param name="givenColumn"></param>
            <param name="playerColor"></param>
            <returns>int.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardManager.CheckWin(System.Int32[])">
            <summary>
            Applies the 'SearchWinSeq' methods to search for a victory sequence
            with the most recent piece's location.
            </summary>
            <param name="pieceCoordinates">The location of the most recent
            piece.</param>
            <returns>Boolean indicating if there is a victory sequence.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardManager.CheckFull">
            <summary>
            Checks if the board is completely full.
            </summary>
            <returns>Bool indicating if the board is full.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardManager.GetBoardString">
            <summary>
            Accesses the Board class' ToString() method.
            </summary>
            <returns>String returned by the Board class' ToString() 
            method.</returns>
        </member>
        <member name="T:Project2_LP2_2020.BoardSearcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.BoardSearcher.#ctor(Project2_LP2_2020.Board)">
            <summary>
            
            </summary>
            <param name="board"></param>
        </member>
        <member name="M:Project2_LP2_2020.BoardSearcher.BoardFull">
            <summary>
            Checks if the top row of the board has any free space, indicating 
            that the board is not completely full.
            </summary>
            <returns>Bool indicating if the board is full.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardSearcher.SearchWinSeqTanPlus(System.Int32[])">
            <summary>
            Search for sequences in the positive tangent diagonal.
            </summary>
            <param name="placedCoordinates">The coordinates of the placed 
            piece.</param>
            <returns>Bool indicating if a winning sequence was found.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardSearcher.SearchWinSeqTanNeg(System.Int32[])">
            <summary>
            Search for sequences in the negative tangent diagonal.
            </summary>
            <param name="placedCoordinates">The coordinates of the placed 
            piece.</param>
            <returns>Bool indicating if a winning sequence was found.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardSearcher.SearchWinSeqHoriz(System.Int32[])">
            <summary>
            Search for sequences in the horizontal axis.
            </summary>
            <param name="placedCoordinates">The coordinates of the placed 
            piece.</param>
            <returns>Bool indicating if a winning sequence was found.</returns>
        </member>
        <member name="M:Project2_LP2_2020.BoardSearcher.SearchWinSeqVert(System.Int32[])">
            <summary>
            Search for sequences in the vertical axis.
            </summary>
            <param name="placedCoordinates">The coordinates of the placed 
            piece.</param>
            <returns>Bool indicating if a winning sequence was found.</returns>
        </member>
        <member name="T:Project2_LP2_2020.Color">
            <summary>
            The three possible colors for a board space, indicating if it is empty 
            or if it is occupied by one of the players 
            </summary>
        </member>
        <member name="T:Project2_LP2_2020.ErrorCodes">
            <summary>
            Enumeration to explicitly identify exceptions for the ExceptionManager
            class.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.ErrorCodes.InvalidColumn">
            <summary>
             Checked column was full.
            </summary>
        </member>
        <member name="T:Project2_LP2_2020.ExceptionManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.ExceptionManager.ExceptionControl(Project2_LP2_2020.ErrorCodes)">
            <summary>
            Method that sends an error message detailing the incident that 
            happened.
            </summary>
            <param name="errorCodes">Variable identifying the error.</param>
        </member>
        <member name="T:Project2_LP2_2020.GameStage">
            <summary>
            Describes current game state:
            Draw, [victory for] Yellow, [victory for] Red.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.GameStage.Draw">
            <summary>
            Draw game.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.GameStage.Yellow">
            <summary>
            Yellow won.
            </summary>
        </member>
        <member name="F:Project2_LP2_2020.GameStage.Red">
            <summary>
            Red won.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.Program.Main(System.String[])">
            <summary>
            Program starts here.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Project2_LP2_2020.Quitter">
            <summary>
            ola.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.Quitter.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.Quitter.Update">
            <summary>
            Update
            </summary>
        </member>
        <member name="T:Project2_LP2_2020.UI">
            <summary>
            
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.UI.Welcome">
            <summary>
            'Welcome' message with the general information 
            (authors, references and game goal).
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.UI.Options">
            <summary>
            Text showing the main game options.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.UI.AnnounceWinner(Project2_LP2_2020.GameStage)">
            <summary>
            Sends message announcing the end of the match, stating what end 
            condition was met.
            </summary>
            <param name="gameStage">parameter that allows method to identify 
            the end condition that made this method be called.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Project2_LP2_2020.UI.ColumnOptions(Project2_LP2_2020.Color,System.Boolean)">
            <summary>
            Tells the player to choose one column of the board to place a piece.
            </summary>
            <param name="color">Color identifying the current player.</param>
            <param name="animation">Boolean used to cycle between waiting string.</param>
        </member>
        <member name="M:Project2_LP2_2020.UI.Clear">
            <summary>
            Clears Exeptions text.
            </summary>
        </member>
        <member name="M:Project2_LP2_2020.UI.Help">
            <summary>
            'Help' text with instructions on how to play and how the
            program works.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="T:CoreGameEngine.ConsolePixel">
            <summary>
            Represents a console pixel with Shape (char), foreground and background
            colors
            </summary>
        </member>
        <member name="F:CoreGameEngine.ConsolePixel.Shape">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreGameEngine.ConsolePixel.ForegroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:CoreGameEngine.ConsolePixel.BackgroundColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:CoreGameEngine.ConsolePixel.IsRenderable">
            <summary>
            Gets a value indicating whether this is pixel renderable.
            </summary>
        </member>
        <member name="M:CoreGameEngine.ConsolePixel.#ctor(System.Char,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Below there are several constructors for building a console pixel
            </summary>
            <param name="Shape"></param>
            <param name="ForegroundColor"></param>
            <param name="BackgroundColor"></param>
        </member>
        <member name="M:CoreGameEngine.ConsolePixel.#ctor(System.Char,System.ConsoleColor)">
            <summary>
            
            </summary>
            <param name="Shape"></param>
            <param name="ForegroundColor"></param>
        </member>
        <member name="T:CoreGameEngine.Scene">
            <summary>
            This class represents a game scene.
            </summary>
        </member>
        <member name="M:CoreGameEngine.Scene.#ctor(System.Int32,System.Int32,CoreGameEngine.InputHandler,CoreGameEngine.ConsoleRenderer,CoreGameEngine.CollisionHandler)">
            <summary>
            Create a new scene.
            </summary>
            <param name="xdim"></param>
            <param name="ydim"></param>
            <param name="inputHandler"></param>
            <param name="renderer"></param>
            <param name="collisionHandler"></param>
        </member>
        <member name="M:CoreGameEngine.Scene.AddGameObject(CoreGameEngine.GameObject)">
            <summary>
            Add a game object to this scene.
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:CoreGameEngine.Scene.FindGameObjectByName(System.String)">
            <summary>
            Find a game object by name in this scene.
            </summary>
            <param name="name"></param>
            <returns>GameObject.</returns>
        </member>
        <member name="M:CoreGameEngine.Scene.Terminate">
            <summary>
            Terminate scene.
            </summary>
        </member>
        <member name="M:CoreGameEngine.Scene.GameLoop(System.Int32)">
            <summary>
            Game loop
            </summary>
            <param name="msFramesPerSecond"></param>
        </member>
    </members>
</doc>
